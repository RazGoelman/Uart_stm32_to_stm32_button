
Uart_stm32_to_stm32_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c8  080040c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040d0  080040d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080040e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080040e4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011722  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002155  00000000  00000000  0003175e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  000338b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  000347d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027153  00000000  00000000  00035620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117e5  00000000  00000000  0005c773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4500  00000000  00000000  0006df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162458  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f94  00000000  00000000  001624a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004068 	.word	0x08004068

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004068 	.word	0x08004068

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa7a 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f82c 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8e2 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f8b0 	bl	8000640 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80004e0:	f000 f878 	bl	80005d4 <MX_TIM6_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GPIO_ReadPin(BlueButton_GPIO_Port, BlueButton_Pin) == GPIO_PIN_RESET){
 80004e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e8:	480e      	ldr	r0, [pc, #56]	; (8000524 <main+0x58>)
 80004ea:	f000 fe47 	bl	800117c <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d103      	bne.n	80004fc <main+0x30>
		  charToTransmit[0] = 48; //48 is ascii character for zero
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <main+0x5c>)
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	e002      	b.n	8000502 <main+0x36>
	  }
	  else {
		  charToTransmit[1] = 49; //49 is ascii character for one
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <main+0x5c>)
 80004fe:	2231      	movs	r2, #49	; 0x31
 8000500:	705a      	strb	r2, [r3, #1]
	}
	  HAL_UART_Transmit(&huart2, charToTransmit, 1, 100);
 8000502:	2364      	movs	r3, #100	; 0x64
 8000504:	2201      	movs	r2, #1
 8000506:	4908      	ldr	r1, [pc, #32]	; (8000528 <main+0x5c>)
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0x60>)
 800050a:	f002 fcd7 	bl	8002ebc <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800050e:	2120      	movs	r1, #32
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f000 fe62 	bl	80011dc <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000518:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800051c:	f000 fad0 	bl	8000ac0 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(BlueButton_GPIO_Port, BlueButton_Pin) == GPIO_PIN_RESET){
 8000520:	e7e0      	b.n	80004e4 <main+0x18>
 8000522:	bf00      	nop
 8000524:	48000800 	.word	0x48000800
 8000528:	200000f8 	.word	0x200000f8
 800052c:	20000074 	.word	0x20000074

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fd8a 	bl	8004058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000556:	f000 fe69 	bl	800122c <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 f904 	bl	800076c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057e:	230a      	movs	r3, #10
 8000580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000582:	2307      	movs	r3, #7
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fea0 	bl	80012d8 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800059e:	f000 f8e5 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	2104      	movs	r1, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fa68 	bl	8001a90 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c6:	f000 f8d1 	bl	800076c <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	; 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_TIM6_Init+0x64>)
 80005e6:	4a15      	ldr	r2, [pc, #84]	; (800063c <MX_TIM6_Init+0x68>)
 80005e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_TIM6_Init+0x64>)
 80005ec:	224f      	movs	r2, #79	; 0x4f
 80005ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_TIM6_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_TIM6_Init+0x64>)
 80005f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_TIM6_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <MX_TIM6_Init+0x64>)
 8000606:	f002 f923 	bl	8002850 <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000610:	f000 f8ac 	bl	800076c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_TIM6_Init+0x64>)
 8000622:	f002 fb57 	bl	8002cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800062c:	f000 f89e 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000028 	.word	0x20000028
 800063c:	40001000 	.word	0x40001000

08000640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000646:	4a15      	ldr	r2, [pc, #84]	; (800069c <MX_USART2_UART_Init+0x5c>)
 8000648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_USART2_UART_Init+0x58>)
 800064c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_USART2_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000684:	f002 fbcc 	bl	8002e20 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800068e:	f000 f86d 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000074 	.word	0x20000074
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_GPIO_Init+0xc4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <MX_GPIO_Init+0xc4>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <MX_GPIO_Init+0xc4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <MX_GPIO_Init+0xc4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a24      	ldr	r2, [pc, #144]	; (8000764 <MX_GPIO_Init+0xc4>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <MX_GPIO_Init+0xc4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_GPIO_Init+0xc4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <MX_GPIO_Init+0xc4>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_GPIO_Init+0xc4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_GPIO_Init+0xc4>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_GPIO_Init+0xc4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f000 fd45 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	480c      	ldr	r0, [pc, #48]	; (8000768 <MX_GPIO_Init+0xc8>)
 8000738:	f000 fb76 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800073c:	2320      	movs	r3, #32
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f000 fb67 	bl	8000e28 <HAL_GPIO_Init>

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	48000800 	.word	0x48000800

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x44>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_MspInit+0x44>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6613      	str	r3, [r2, #96]	; 0x60
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x44>)
 800078c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x44>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x44>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6593      	str	r3, [r2, #88]	; 0x58
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x44>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <HAL_TIM_Base_MspInit+0x44>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d113      	bne.n	80007fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_TIM_Base_MspInit+0x48>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <HAL_TIM_Base_MspInit+0x48>)
 80007d8:	f043 0310 	orr.w	r3, r3, #16
 80007dc:	6593      	str	r3, [r2, #88]	; 0x58
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_TIM_Base_MspInit+0x48>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	f003 0310 	and.w	r3, r3, #16
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2036      	movs	r0, #54	; 0x36
 80007f0:	f000 fa65 	bl	8000cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007f4:	2036      	movs	r0, #54	; 0x36
 80007f6:	f000 fa7e 	bl	8000cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40001000 	.word	0x40001000
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0ac      	sub	sp, #176	; 0xb0
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2288      	movs	r2, #136	; 0x88
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fc13 	bl	8004058 <memset>
  if(huart->Instance==USART2)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <HAL_UART_MspInit+0xc0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d143      	bne.n	80008c4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800083c:	2302      	movs	r3, #2
 800083e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000840:	2300      	movs	r3, #0
 8000842:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fb45 	bl	8001ed8 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000854:	f7ff ff8a 	bl	800076c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <HAL_UART_MspInit+0xc4>)
 800085a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085c:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <HAL_UART_MspInit+0xc4>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000862:	6593      	str	r3, [r2, #88]	; 0x58
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_UART_MspInit+0xc4>)
 8000866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0xc4>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000874:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <HAL_UART_MspInit+0xc4>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0xc4>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000888:	230c      	movs	r3, #12
 800088a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a0:	2307      	movs	r3, #7
 80008a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f000 faba 	bl	8000e28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2026      	movs	r0, #38	; 0x26
 80008ba:	f000 fa00 	bl	8000cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008be:	2026      	movs	r0, #38	; 0x26
 80008c0:	f000 fa19 	bl	8000cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	37b0      	adds	r7, #176	; 0xb0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40004400 	.word	0x40004400
 80008d0:	40021000 	.word	0x40021000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 f8ae 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <USART2_IRQHandler+0x10>)
 800092e:	f002 fb59 	bl	8002fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000074 	.word	0x20000074

0800093c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <TIM6_DAC_IRQHandler+0x10>)
 8000942:	f001 ffdc 	bl	80028fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000028 	.word	0x20000028

08000950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000978:	f7ff ffea 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490d      	ldr	r1, [pc, #52]	; (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0a      	ldr	r4, [pc, #40]	; (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a2:	f003 fb35 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a6:	f7ff fd91 	bl	80004cc <main>

080009aa <LoopForever>:

LoopForever:
    b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b8:	080040d8 	.word	0x080040d8
  ldr r2, =_sbss
 80009bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c0:	20000100 	.word	0x20000100

080009c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_2_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_Init+0x3c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <HAL_Init+0x3c>)
 80009d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009de:	2003      	movs	r0, #3
 80009e0:	f000 f962 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 f80f 	bl	8000a08 <HAL_InitTick>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	e001      	b.n	80009fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f6:	f7ff febf 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d023      	beq.n	8000a64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_InitTick+0x70>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f96d 	bl	8000d12 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10f      	bne.n	8000a5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d809      	bhi.n	8000a58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a4c:	f000 f937 	bl	8000cbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_InitTick+0x74>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e007      	b.n	8000a68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e001      	b.n	8000a68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	200000fc 	.word	0x200000fc

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200000fc 	.word	0x200000fc

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff ffee 	bl	8000aa8 <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_Delay+0x44>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff ffde 	bl	8000aa8 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <__NVIC_EnableIRQ+0x38>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff29 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff3e 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff8e 	bl	8000bfc <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5d 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff31 	bl	8000b6c <__NVIC_EnableIRQ>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffa2 	bl	8000c64 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d008      	beq.n	8000d54 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2204      	movs	r2, #4
 8000d46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e022      	b.n	8000d9a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 020e 	bic.w	r2, r2, #14
 8000d62:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0201 	bic.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	f003 021c 	and.w	r2, r3, #28
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	2101      	movs	r1, #1
 8000d82:	fa01 f202 	lsl.w	r2, r1, r2
 8000d86:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d005      	beq.n	8000dca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e029      	b.n	8000e1e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 020e 	bic.w	r2, r2, #14
 8000dd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0201 	bic.w	r2, r2, #1
 8000de8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f003 021c 	and.w	r2, r3, #28
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	4798      	blx	r3
    }
  }
  return status;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	e17f      	b.n	8001138 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 8171 	beq.w	8001132 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d005      	beq.n	8000e68 <HAL_GPIO_Init+0x40>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d130      	bne.n	8000eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 0201 	and.w	r2, r3, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d118      	bne.n	8000f08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d017      	beq.n	8000f44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d123      	bne.n	8000f98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	6939      	ldr	r1, [r7, #16]
 8000f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0203 	and.w	r2, r3, #3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80ac 	beq.w	8001132 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b5f      	ldr	r3, [pc, #380]	; (8001158 <HAL_GPIO_Init+0x330>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	4a5e      	ldr	r2, [pc, #376]	; (8001158 <HAL_GPIO_Init+0x330>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <HAL_GPIO_Init+0x330>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff2:	4a5a      	ldr	r2, [pc, #360]	; (800115c <HAL_GPIO_Init+0x334>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800101c:	d025      	beq.n	800106a <HAL_GPIO_Init+0x242>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4f      	ldr	r2, [pc, #316]	; (8001160 <HAL_GPIO_Init+0x338>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01f      	beq.n	8001066 <HAL_GPIO_Init+0x23e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <HAL_GPIO_Init+0x33c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x23a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <HAL_GPIO_Init+0x340>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x236>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <HAL_GPIO_Init+0x344>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x232>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <HAL_GPIO_Init+0x348>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x22e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4a      	ldr	r2, [pc, #296]	; (8001174 <HAL_GPIO_Init+0x34c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x22a>
 800104e:	2306      	movs	r3, #6
 8001050:	e00c      	b.n	800106c <HAL_GPIO_Init+0x244>
 8001052:	2307      	movs	r3, #7
 8001054:	e00a      	b.n	800106c <HAL_GPIO_Init+0x244>
 8001056:	2305      	movs	r3, #5
 8001058:	e008      	b.n	800106c <HAL_GPIO_Init+0x244>
 800105a:	2304      	movs	r3, #4
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x244>
 800105e:	2303      	movs	r3, #3
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x244>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x244>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x244>
 800106a:	2300      	movs	r3, #0
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800107c:	4937      	ldr	r1, [pc, #220]	; (800115c <HAL_GPIO_Init+0x334>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <HAL_GPIO_Init+0x350>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ae:	4a32      	ldr	r2, [pc, #200]	; (8001178 <HAL_GPIO_Init+0x350>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <HAL_GPIO_Init+0x350>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d8:	4a27      	ldr	r2, [pc, #156]	; (8001178 <HAL_GPIO_Init+0x350>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <HAL_GPIO_Init+0x350>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001102:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <HAL_GPIO_Init+0x350>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_GPIO_Init+0x350>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <HAL_GPIO_Init+0x350>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa22 f303 	lsr.w	r3, r2, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	f47f ae78 	bne.w	8000e38 <HAL_GPIO_Init+0x10>
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000
 8001160:	48000400 	.word	0x48000400
 8001164:	48000800 	.word	0x48000800
 8001168:	48000c00 	.word	0x48000c00
 800116c:	48001000 	.word	0x48001000
 8001170:	48001400 	.word	0x48001400
 8001174:	48001800 	.word	0x48001800
 8001178:	40010400 	.word	0x40010400

0800117c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e001      	b.n	800119e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4013      	ands	r3, r2
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43d9      	mvns	r1, r3
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	400b      	ands	r3, r1
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_PWREx_GetVoltageRange+0x18>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40007000 	.word	0x40007000

0800122c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123a:	d130      	bne.n	800129e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001248:	d038      	beq.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2232      	movs	r2, #50	; 0x32
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0c9b      	lsrs	r3, r3, #18
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001270:	e002      	b.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3b01      	subs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001284:	d102      	bne.n	800128c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f2      	bne.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001298:	d110      	bne.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e00f      	b.n	80012be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012aa:	d007      	beq.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40007000 	.word	0x40007000
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e3ca      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ea:	4b97      	ldr	r3, [pc, #604]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f4:	4b94      	ldr	r3, [pc, #592]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80e4 	beq.w	80014d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_RCC_OscConfig+0x4a>
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b0c      	cmp	r3, #12
 8001316:	f040 808b 	bne.w	8001430 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2b01      	cmp	r3, #1
 800131e:	f040 8087 	bne.w	8001430 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001322:	4b89      	ldr	r3, [pc, #548]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_RCC_OscConfig+0x62>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e3a2      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1a      	ldr	r2, [r3, #32]
 800133e:	4b82      	ldr	r3, [pc, #520]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d004      	beq.n	8001354 <HAL_RCC_OscConfig+0x7c>
 800134a:	4b7f      	ldr	r3, [pc, #508]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001352:	e005      	b.n	8001360 <HAL_RCC_OscConfig+0x88>
 8001354:	4b7c      	ldr	r3, [pc, #496]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001360:	4293      	cmp	r3, r2
 8001362:	d223      	bcs.n	80013ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fd55 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e383      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001378:	4b73      	ldr	r3, [pc, #460]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a72      	ldr	r2, [pc, #456]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b70      	ldr	r3, [pc, #448]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	496d      	ldr	r1, [pc, #436]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001396:	4b6c      	ldr	r3, [pc, #432]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	4968      	ldr	r1, [pc, #416]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
 80013aa:	e025      	b.n	80013f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ac:	4b66      	ldr	r3, [pc, #408]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a65      	ldr	r2, [pc, #404]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4960      	ldr	r1, [pc, #384]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ca:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	495b      	ldr	r1, [pc, #364]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d109      	bne.n	80013f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fd15 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e343      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013f8:	f000 fc4a 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b52      	ldr	r3, [pc, #328]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	4950      	ldr	r1, [pc, #320]	; (800154c <HAL_RCC_OscConfig+0x274>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	4a4e      	ldr	r2, [pc, #312]	; (8001550 <HAL_RCC_OscConfig+0x278>)
 8001416:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001418:	4b4e      	ldr	r3, [pc, #312]	; (8001554 <HAL_RCC_OscConfig+0x27c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff faf3 	bl	8000a08 <HAL_InitTick>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d052      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	e327      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d032      	beq.n	800149e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a42      	ldr	r2, [pc, #264]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001444:	f7ff fb30 	bl	8000aa8 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800144c:	f7ff fb2c 	bl	8000aa8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e310      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a36      	ldr	r2, [pc, #216]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4931      	ldr	r1, [pc, #196]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001488:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	492c      	ldr	r1, [pc, #176]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
 800149c:	e01a      	b.n	80014d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a29      	ldr	r2, [pc, #164]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fafd 	bl	8000aa8 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b2:	f7ff faf9 	bl	8000aa8 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e2dd      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x1da>
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d074      	beq.n	80015ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x21a>
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	d10e      	bne.n	800150a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d10b      	bne.n	800150a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d064      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d160      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e2ba      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x24a>
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e026      	b.n	8001570 <HAL_RCC_OscConfig+0x298>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152a:	d115      	bne.n	8001558 <HAL_RCC_OscConfig+0x280>
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a05      	ldr	r2, [pc, #20]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 8001532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a02      	ldr	r2, [pc, #8]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e014      	b.n	8001570 <HAL_RCC_OscConfig+0x298>
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	08004080 	.word	0x08004080
 8001550:	20000000 	.word	0x20000000
 8001554:	20000004 	.word	0x20000004
 8001558:	4ba0      	ldr	r3, [pc, #640]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a9f      	ldr	r2, [pc, #636]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b9d      	ldr	r3, [pc, #628]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a9c      	ldr	r2, [pc, #624]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fa96 	bl	8000aa8 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fa92 	bl	8000aa8 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e276      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001592:	4b92      	ldr	r3, [pc, #584]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x2a8>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fa82 	bl	8000aa8 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fa7e 	bl	8000aa8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e262      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ba:	4b88      	ldr	r3, [pc, #544]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2d0>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d060      	beq.n	8001698 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_OscConfig+0x310>
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	d119      	bne.n	8001616 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d116      	bne.n	8001616 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e8:	4b7c      	ldr	r3, [pc, #496]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x328>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e23f      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b76      	ldr	r3, [pc, #472]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	061b      	lsls	r3, r3, #24
 800160e:	4973      	ldr	r1, [pc, #460]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001614:	e040      	b.n	8001698 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d023      	beq.n	8001666 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161e:	4b6f      	ldr	r3, [pc, #444]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6e      	ldr	r2, [pc, #440]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fa3d 	bl	8000aa8 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fa39 	bl	8000aa8 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e21d      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	4b65      	ldr	r3, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b62      	ldr	r3, [pc, #392]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	495f      	ldr	r1, [pc, #380]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	e018      	b.n	8001698 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b5d      	ldr	r3, [pc, #372]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a5c      	ldr	r2, [pc, #368]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 800166c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff fa19 	bl	8000aa8 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fa15 	bl	8000aa8 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1f9      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d03c      	beq.n	800171e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ac:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80016ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b2:	4a4a      	ldr	r2, [pc, #296]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff f9f4 	bl	8000aa8 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff f9f0 	bl	8000aa8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1d4      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80016d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ef      	beq.n	80016c4 <HAL_RCC_OscConfig+0x3ec>
 80016e4:	e01b      	b.n	800171e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80016e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ec:	4a3b      	ldr	r2, [pc, #236]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff f9d7 	bl	8000aa8 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fe:	f7ff f9d3 	bl	8000aa8 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1b7      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ef      	bne.n	80016fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80a6 	beq.w	8001878 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10d      	bne.n	8001758 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	4a26      	ldr	r2, [pc, #152]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001746:	6593      	str	r3, [r2, #88]	; 0x58
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001754:	2301      	movs	r3, #1
 8001756:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_RCC_OscConfig+0x508>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d118      	bne.n	8001796 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_RCC_OscConfig+0x508>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <HAL_RCC_OscConfig+0x508>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001770:	f7ff f99a 	bl	8000aa8 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001778:	f7ff f996 	bl	8000aa8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e17a      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_RCC_OscConfig+0x508>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4d8>
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ae:	e029      	b.n	8001804 <HAL_RCC_OscConfig+0x52c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d115      	bne.n	80017e4 <HAL_RCC_OscConfig+0x50c>
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ce:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_RCC_OscConfig+0x504>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d8:	e014      	b.n	8001804 <HAL_RCC_OscConfig+0x52c>
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40007000 	.word	0x40007000
 80017e4:	4b9c      	ldr	r3, [pc, #624]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ea:	4a9b      	ldr	r2, [pc, #620]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f4:	4b98      	ldr	r3, [pc, #608]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	4a97      	ldr	r2, [pc, #604]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d016      	beq.n	800183a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff f94c 	bl	8000aa8 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff f948 	bl	8000aa8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e12a      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	4b8b      	ldr	r3, [pc, #556]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ed      	beq.n	8001814 <HAL_RCC_OscConfig+0x53c>
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183a:	f7ff f935 	bl	8000aa8 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001840:	e00a      	b.n	8001858 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff f931 	bl	8000aa8 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e113      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	4b7f      	ldr	r3, [pc, #508]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ed      	bne.n	8001842 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001866:	7ffb      	ldrb	r3, [r7, #31]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186c:	4b7a      	ldr	r3, [pc, #488]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	4a79      	ldr	r2, [pc, #484]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001876:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80fe 	beq.w	8001a7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	2b02      	cmp	r3, #2
 8001888:	f040 80d0 	bne.w	8001a2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800188c:	4b72      	ldr	r3, [pc, #456]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	429a      	cmp	r2, r3
 800189e:	d130      	bne.n	8001902 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	3b01      	subs	r3, #1
 80018ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d127      	bne.n	8001902 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11f      	bne.n	8001902 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018cc:	2a07      	cmp	r2, #7
 80018ce:	bf14      	ite	ne
 80018d0:	2201      	movne	r2, #1
 80018d2:	2200      	moveq	r2, #0
 80018d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d113      	bne.n	8001902 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e4:	085b      	lsrs	r3, r3, #1
 80018e6:	3b01      	subs	r3, #1
 80018e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	3b01      	subs	r3, #1
 80018fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d06e      	beq.n	80019e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	2b0c      	cmp	r3, #12
 8001906:	d069      	beq.n	80019dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0ad      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001924:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a4b      	ldr	r2, [pc, #300]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 800192a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800192e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001930:	f7ff f8ba 	bl	8000aa8 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f8b6 	bl	8000aa8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e09a      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194a:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001956:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <HAL_RCC_OscConfig+0x784>)
 800195c:	4013      	ands	r3, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001966:	3a01      	subs	r2, #1
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001970:	0212      	lsls	r2, r2, #8
 8001972:	4311      	orrs	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001978:	0852      	lsrs	r2, r2, #1
 800197a:	3a01      	subs	r2, #1
 800197c:	0552      	lsls	r2, r2, #21
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001984:	0852      	lsrs	r2, r2, #1
 8001986:	3a01      	subs	r2, #1
 8001988:	0652      	lsls	r2, r2, #25
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001990:	0912      	lsrs	r2, r2, #4
 8001992:	0452      	lsls	r2, r2, #17
 8001994:	430a      	orrs	r2, r1
 8001996:	4930      	ldr	r1, [pc, #192]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001998:	4313      	orrs	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2d      	ldr	r2, [pc, #180]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4a2a      	ldr	r2, [pc, #168]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019b4:	f7ff f878 	bl	8000aa8 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff f874 	bl	8000aa8 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e058      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019da:	e050      	b.n	8001a7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e04f      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d148      	bne.n	8001a7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a04:	f7ff f850 	bl	8000aa8 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f84c 	bl	8000aa8 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e030      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x734>
 8001a2a:	e028      	b.n	8001a7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d023      	beq.n	8001a7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001a38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f833 	bl	8000aa8 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a44:	e00c      	b.n	8001a60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff f82f 	bl	8000aa8 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d905      	bls.n	8001a60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e013      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_OscConfig+0x7b0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ec      	bne.n	8001a46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_OscConfig+0x7b0>)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	4905      	ldr	r1, [pc, #20]	; (8001a88 <HAL_RCC_OscConfig+0x7b0>)
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_RCC_OscConfig+0x7b4>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
 8001a78:	e001      	b.n	8001a7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	feeefffc 	.word	0xfeeefffc

08001a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0e7      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b75      	ldr	r3, [pc, #468]	; (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d910      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b72      	ldr	r3, [pc, #456]	; (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0207 	bic.w	r2, r3, #7
 8001aba:	4970      	ldr	r1, [pc, #448]	; (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b6e      	ldr	r3, [pc, #440]	; (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0cf      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b66      	ldr	r3, [pc, #408]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d908      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4960      	ldr	r1, [pc, #384]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d04c      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d121      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e0a6      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2e:	4b54      	ldr	r3, [pc, #336]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d115      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e09a      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b46:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e08e      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b56:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e086      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4943      	ldr	r1, [pc, #268]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b78:	f7fe ff96 	bl	8000aa8 <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7fe ff92 	bl	8000aa8 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e06e      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d208      	bcs.n	8001bd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	492b      	ldr	r1, [pc, #172]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d210      	bcs.n	8001c06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 0207 	bic.w	r2, r3, #7
 8001bec:	4923      	ldr	r1, [pc, #140]	; (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e036      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	4918      	ldr	r1, [pc, #96]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d009      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4910      	ldr	r1, [pc, #64]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c44:	f000 f824 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	490b      	ldr	r1, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x1f4>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1fc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fecd 	bl	8000a08 <HAL_InitTick>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c72:	7afb      	ldrb	r3, [r7, #11]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08004080 	.word	0x08004080
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9e:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d121      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d11e      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cc4:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e005      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d102      	bne.n	8001d0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	e004      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d134      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d003      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0xac>
 8001d34:	e005      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d38:	617b      	str	r3, [r7, #20]
      break;
 8001d3a:	e005      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d3e:	617b      	str	r3, [r7, #20]
      break;
 8001d40:	e002      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	617b      	str	r3, [r7, #20]
      break;
 8001d46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	3301      	adds	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	fb03 f202 	mul.w	r2, r3, r2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	0e5b      	lsrs	r3, r3, #25
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d88:	69bb      	ldr	r3, [r7, #24]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08004098 	.word	0x08004098
 8001da0:	00f42400 	.word	0x00f42400
 8001da4:	007a1200 	.word	0x007a1200

08001da8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dc4:	f7ff fff0 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4904      	ldr	r1, [pc, #16]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	08004090 	.word	0x08004090

08001dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001df0:	f7ff ffda 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0adb      	lsrs	r3, r3, #11
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4904      	ldr	r1, [pc, #16]	; (8001e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08004090 	.word	0x08004090

08001e18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e30:	f7ff f9ee 	bl	8001210 <HAL_PWREx_GetVoltageRange>
 8001e34:	6178      	str	r0, [r7, #20]
 8001e36:	e014      	b.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e42:	6593      	str	r3, [r2, #88]	; 0x58
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e50:	f7ff f9de 	bl	8001210 <HAL_PWREx_GetVoltageRange>
 8001e54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e68:	d10b      	bne.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b80      	cmp	r3, #128	; 0x80
 8001e6e:	d919      	bls.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2ba0      	cmp	r3, #160	; 0xa0
 8001e74:	d902      	bls.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e76:	2302      	movs	r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	e013      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e010      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d902      	bls.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e88:	2303      	movs	r3, #3
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e00a      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d102      	bne.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e94:	2302      	movs	r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	e004      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b70      	cmp	r3, #112	; 0x70
 8001e9e:	d101      	bne.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 0207 	bic.w	r2, r3, #7
 8001eac:	4909      	ldr	r1, [pc, #36]	; (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40022000 	.word	0x40022000

08001ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d041      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001efc:	d02a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001efe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f02:	d824      	bhi.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f08:	d008      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f0e:	d81e      	bhi.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f18:	d010      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f1a:	e018      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f1c:	4b86      	ldr	r3, [pc, #536]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a85      	ldr	r2, [pc, #532]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f28:	e015      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fabb 	bl	80024ac <RCCEx_PLLSAI1_Config>
 8001f36:	4603      	mov	r3, r0
 8001f38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f3a:	e00c      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3320      	adds	r3, #32
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fba6 	bl	8002694 <RCCEx_PLLSAI2_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f4c:	e003      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	74fb      	strb	r3, [r7, #19]
      break;
 8001f52:	e000      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10b      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f5c:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f6a:	4973      	ldr	r1, [pc, #460]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f72:	e001      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d041      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f8c:	d02a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f92:	d824      	bhi.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f98:	d008      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f9e:	d81e      	bhi.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001faa:	e018      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fac:	4b62      	ldr	r3, [pc, #392]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a61      	ldr	r2, [pc, #388]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb8:	e015      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fa73 	bl	80024ac <RCCEx_PLLSAI1_Config>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fca:	e00c      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3320      	adds	r3, #32
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fb5e 	bl	8002694 <RCCEx_PLLSAI2_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fdc:	e003      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fe6:	7cfb      	ldrb	r3, [r7, #19]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fec:	4b52      	ldr	r3, [pc, #328]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ffa:	494f      	ldr	r1, [pc, #316]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002002:	e001      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002004:	7cfb      	ldrb	r3, [r7, #19]
 8002006:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80a0 	beq.w	8002156 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	4a40      	ldr	r2, [pc, #256]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203a:	6593      	str	r3, [r2, #88]	; 0x58
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002048:	2301      	movs	r3, #1
 800204a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a3a      	ldr	r2, [pc, #232]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002058:	f7fe fd26 	bl	8000aa8 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800205e:	e009      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002060:	f7fe fd22 	bl	8000aa8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d902      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	74fb      	strb	r3, [r7, #19]
        break;
 8002072:	e005      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ef      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d15c      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002086:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002090:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01f      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d019      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	4a20      	ldr	r2, [pc, #128]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d016      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7fe fce1 	bl	8000aa8 <HAL_GetTick>
 80020e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e8:	e00b      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7fe fcdd 	bl	8000aa8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d902      	bls.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002100:	e006      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0ec      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002126:	4904      	ldr	r1, [pc, #16]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800212e:	e009      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
 8002134:	e006      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002144:	7c7b      	ldrb	r3, [r7, #17]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d105      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214a:	4b9e      	ldr	r3, [pc, #632]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	4a9d      	ldr	r2, [pc, #628]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002154:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002162:	4b98      	ldr	r3, [pc, #608]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002168:	f023 0203 	bic.w	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	4994      	ldr	r1, [pc, #592]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002184:	4b8f      	ldr	r3, [pc, #572]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	f023 020c 	bic.w	r2, r3, #12
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002192:	498c      	ldr	r1, [pc, #560]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021a6:	4b87      	ldr	r3, [pc, #540]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	4983      	ldr	r1, [pc, #524]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021c8:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	497b      	ldr	r1, [pc, #492]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f8:	4972      	ldr	r1, [pc, #456]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800220c:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	496a      	ldr	r1, [pc, #424]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800222e:	4b65      	ldr	r3, [pc, #404]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	4961      	ldr	r1, [pc, #388]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002250:	4b5c      	ldr	r3, [pc, #368]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225e:	4959      	ldr	r1, [pc, #356]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002272:	4b54      	ldr	r3, [pc, #336]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002280:	4950      	ldr	r1, [pc, #320]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002294:	4b4b      	ldr	r3, [pc, #300]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	4948      	ldr	r1, [pc, #288]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b6:	4b43      	ldr	r3, [pc, #268]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	493f      	ldr	r1, [pc, #252]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d028      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d8:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e6:	4937      	ldr	r1, [pc, #220]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f6:	d106      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f8:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a31      	ldr	r2, [pc, #196]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002302:	60d3      	str	r3, [r2, #12]
 8002304:	e011      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800230a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800230e:	d10c      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f8c8 	bl	80024ac <RCCEx_PLLSAI1_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d028      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002336:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	491f      	ldr	r1, [pc, #124]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002354:	d106      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002360:	60d3      	str	r3, [r2, #12]
 8002362:	e011      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800236c:	d10c      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2101      	movs	r1, #1
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f899 	bl	80024ac <RCCEx_PLLSAI1_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d02b      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b2:	d109      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a02      	ldr	r2, [pc, #8]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023be:	60d3      	str	r3, [r2, #12]
 80023c0:	e014      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2101      	movs	r1, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f867 	bl	80024ac <RCCEx_PLLSAI1_Config>
 80023de:	4603      	mov	r3, r0
 80023e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d02f      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f8:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002406:	4928      	ldr	r1, [pc, #160]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002416:	d10d      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	2102      	movs	r1, #2
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f844 	bl	80024ac <RCCEx_PLLSAI1_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d014      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	74bb      	strb	r3, [r7, #18]
 8002432:	e011      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800243c:	d10c      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3320      	adds	r3, #32
 8002442:	2102      	movs	r1, #2
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f925 	bl	8002694 <RCCEx_PLLSAI2_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002472:	490d      	ldr	r1, [pc, #52]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002496:	4904      	ldr	r1, [pc, #16]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800249e:	7cbb      	ldrb	r3, [r7, #18]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000

080024ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ba:	4b75      	ldr	r3, [pc, #468]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d018      	beq.n	80024f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024c6:	4b72      	ldr	r3, [pc, #456]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0203 	and.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d10d      	bne.n	80024f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
       ||
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024de:	4b6c      	ldr	r3, [pc, #432]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
       ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d047      	beq.n	8002582 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	e044      	b.n	8002582 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d018      	beq.n	8002532 <RCCEx_PLLSAI1_Config+0x86>
 8002500:	2b03      	cmp	r3, #3
 8002502:	d825      	bhi.n	8002550 <RCCEx_PLLSAI1_Config+0xa4>
 8002504:	2b01      	cmp	r3, #1
 8002506:	d002      	beq.n	800250e <RCCEx_PLLSAI1_Config+0x62>
 8002508:	2b02      	cmp	r3, #2
 800250a:	d009      	beq.n	8002520 <RCCEx_PLLSAI1_Config+0x74>
 800250c:	e020      	b.n	8002550 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800250e:	4b60      	ldr	r3, [pc, #384]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d11d      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251e:	e01a      	b.n	8002556 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002520:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	2b00      	cmp	r3, #0
 800252a:	d116      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002530:	e013      	b.n	800255a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002532:	4b57      	ldr	r3, [pc, #348]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800253e:	4b54      	ldr	r3, [pc, #336]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800254e:	e006      	b.n	800255e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      break;
 8002554:	e004      	b.n	8002560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002556:	bf00      	nop
 8002558:	e002      	b.n	8002560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255a:	bf00      	nop
 800255c:	e000      	b.n	8002560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10d      	bne.n	8002582 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002566:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	430b      	orrs	r3, r1
 800257c:	4944      	ldr	r1, [pc, #272]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257e:	4313      	orrs	r3, r2
 8002580:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d17d      	bne.n	8002684 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002588:	4b41      	ldr	r3, [pc, #260]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a40      	ldr	r2, [pc, #256]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002594:	f7fe fa88 	bl	8000aa8 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800259a:	e009      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800259c:	f7fe fa84 	bl	8000aa8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d902      	bls.n	80025b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	73fb      	strb	r3, [r7, #15]
        break;
 80025ae:	e005      	b.n	80025bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025b0:	4b37      	ldr	r3, [pc, #220]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ef      	bne.n	800259c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d160      	bne.n	8002684 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c8:	4b31      	ldr	r3, [pc, #196]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6892      	ldr	r2, [r2, #8]
 80025d8:	0211      	lsls	r1, r2, #8
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68d2      	ldr	r2, [r2, #12]
 80025de:	0912      	lsrs	r2, r2, #4
 80025e0:	0452      	lsls	r2, r2, #17
 80025e2:	430a      	orrs	r2, r1
 80025e4:	492a      	ldr	r1, [pc, #168]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	610b      	str	r3, [r1, #16]
 80025ea:	e027      	b.n	800263c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d112      	bne.n	8002618 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f2:	4b27      	ldr	r3, [pc, #156]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6892      	ldr	r2, [r2, #8]
 8002602:	0211      	lsls	r1, r2, #8
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6912      	ldr	r2, [r2, #16]
 8002608:	0852      	lsrs	r2, r2, #1
 800260a:	3a01      	subs	r2, #1
 800260c:	0552      	lsls	r2, r2, #21
 800260e:	430a      	orrs	r2, r1
 8002610:	491f      	ldr	r1, [pc, #124]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	610b      	str	r3, [r1, #16]
 8002616:	e011      	b.n	800263c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6892      	ldr	r2, [r2, #8]
 8002628:	0211      	lsls	r1, r2, #8
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6952      	ldr	r2, [r2, #20]
 800262e:	0852      	lsrs	r2, r2, #1
 8002630:	3a01      	subs	r2, #1
 8002632:	0652      	lsls	r2, r2, #25
 8002634:	430a      	orrs	r2, r1
 8002636:	4916      	ldr	r1, [pc, #88]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a13      	ldr	r2, [pc, #76]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002646:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fa2e 	bl	8000aa8 <HAL_GetTick>
 800264c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800264e:	e009      	b.n	8002664 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002650:	f7fe fa2a 	bl	8000aa8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d902      	bls.n	8002664 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	73fb      	strb	r3, [r7, #15]
          break;
 8002662:	e005      	b.n	8002670 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ef      	beq.n	8002650 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	4904      	ldr	r1, [pc, #16]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000

08002694 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026a2:	4b6a      	ldr	r3, [pc, #424]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d018      	beq.n	80026e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026ae:	4b67      	ldr	r3, [pc, #412]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0203 	and.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d10d      	bne.n	80026da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
       ||
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026c6:	4b61      	ldr	r3, [pc, #388]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
       ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d047      	beq.n	800276a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e044      	b.n	800276a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d018      	beq.n	800271a <RCCEx_PLLSAI2_Config+0x86>
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d825      	bhi.n	8002738 <RCCEx_PLLSAI2_Config+0xa4>
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d002      	beq.n	80026f6 <RCCEx_PLLSAI2_Config+0x62>
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d009      	beq.n	8002708 <RCCEx_PLLSAI2_Config+0x74>
 80026f4:	e020      	b.n	8002738 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026f6:	4b55      	ldr	r3, [pc, #340]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11d      	bne.n	800273e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002706:	e01a      	b.n	800273e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d116      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002718:	e013      	b.n	8002742 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800271a:	4b4c      	ldr	r3, [pc, #304]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002736:	e006      	b.n	8002746 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      break;
 800273c:	e004      	b.n	8002748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273e:	bf00      	nop
 8002740:	e002      	b.n	8002748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002746:	bf00      	nop
    }

    if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800274e:	4b3f      	ldr	r3, [pc, #252]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	430b      	orrs	r3, r1
 8002764:	4939      	ldr	r1, [pc, #228]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d167      	bne.n	8002840 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002770:	4b36      	ldr	r3, [pc, #216]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a35      	ldr	r2, [pc, #212]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277c:	f7fe f994 	bl	8000aa8 <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002782:	e009      	b.n	8002798 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002784:	f7fe f990 	bl	8000aa8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d902      	bls.n	8002798 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	73fb      	strb	r3, [r7, #15]
        break;
 8002796:	e005      	b.n	80027a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002798:	4b2c      	ldr	r3, [pc, #176]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ef      	bne.n	8002784 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d14a      	bne.n	8002840 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6892      	ldr	r2, [r2, #8]
 80027c0:	0211      	lsls	r1, r2, #8
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68d2      	ldr	r2, [r2, #12]
 80027c6:	0912      	lsrs	r2, r2, #4
 80027c8:	0452      	lsls	r2, r2, #17
 80027ca:	430a      	orrs	r2, r1
 80027cc:	491f      	ldr	r1, [pc, #124]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	614b      	str	r3, [r1, #20]
 80027d2:	e011      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6892      	ldr	r2, [r2, #8]
 80027e4:	0211      	lsls	r1, r2, #8
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6912      	ldr	r2, [r2, #16]
 80027ea:	0852      	lsrs	r2, r2, #1
 80027ec:	3a01      	subs	r2, #1
 80027ee:	0652      	lsls	r2, r2, #25
 80027f0:	430a      	orrs	r2, r1
 80027f2:	4916      	ldr	r1, [pc, #88]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a13      	ldr	r2, [pc, #76]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002802:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe f950 	bl	8000aa8 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800280a:	e009      	b.n	8002820 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800280c:	f7fe f94c 	bl	8000aa8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	73fb      	strb	r3, [r7, #15]
          break;
 800281e:	e005      	b.n	800282c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ef      	beq.n	800280c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	4904      	ldr	r1, [pc, #16]	; (800284c <RCCEx_PLLSAI2_Config+0x1b8>)
 800283c:	4313      	orrs	r3, r2
 800283e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000

08002850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e049      	b.n	80028f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fd ffa2 	bl	80007c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f000 f986 	bl	8002ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b02      	cmp	r3, #2
 8002912:	d122      	bne.n	800295a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b02      	cmp	r3, #2
 8002920:	d11b      	bne.n	800295a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f06f 0202 	mvn.w	r2, #2
 800292a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f90f 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002946:	e005      	b.n	8002954 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f901 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f912 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b04      	cmp	r3, #4
 8002966:	d122      	bne.n	80029ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b04      	cmp	r3, #4
 8002974:	d11b      	bne.n	80029ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f06f 0204 	mvn.w	r2, #4
 800297e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f8e5 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 800299a:	e005      	b.n	80029a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f8d7 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8e8 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d122      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d11b      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f06f 0208 	mvn.w	r2, #8
 80029d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2204      	movs	r2, #4
 80029d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f8bb 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 80029ee:	e005      	b.n	80029fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8ad 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8be 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d122      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d11b      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0210 	mvn.w	r2, #16
 8002a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f891 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002a42:	e005      	b.n	8002a50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f883 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f894 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d10e      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d107      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0201 	mvn.w	r2, #1
 8002a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f85d 	bl	8002b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	2b80      	cmp	r3, #128	; 0x80
 8002a8e:	d10e      	bne.n	8002aae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	2b80      	cmp	r3, #128	; 0x80
 8002a9c:	d107      	bne.n	8002aae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f9a5 	bl	8002df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abc:	d10e      	bne.n	8002adc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac8:	2b80      	cmp	r3, #128	; 0x80
 8002aca:	d107      	bne.n	8002adc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f998 	bl	8002e0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b40      	cmp	r3, #64	; 0x40
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d107      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f842 	bl	8002b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d10e      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d107      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0220 	mvn.w	r2, #32
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f958 	bl	8002de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a40      	ldr	r2, [pc, #256]	; (8002cb4 <TIM_Base_SetConfig+0x114>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d00f      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <TIM_Base_SetConfig+0x118>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00b      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <TIM_Base_SetConfig+0x11c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d007      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a3b      	ldr	r2, [pc, #236]	; (8002cc0 <TIM_Base_SetConfig+0x120>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a3a      	ldr	r2, [pc, #232]	; (8002cc4 <TIM_Base_SetConfig+0x124>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d108      	bne.n	8002bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2f      	ldr	r2, [pc, #188]	; (8002cb4 <TIM_Base_SetConfig+0x114>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01f      	beq.n	8002c3a <TIM_Base_SetConfig+0x9a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c00:	d01b      	beq.n	8002c3a <TIM_Base_SetConfig+0x9a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a2c      	ldr	r2, [pc, #176]	; (8002cb8 <TIM_Base_SetConfig+0x118>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d017      	beq.n	8002c3a <TIM_Base_SetConfig+0x9a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <TIM_Base_SetConfig+0x11c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <TIM_Base_SetConfig+0x9a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <TIM_Base_SetConfig+0x120>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00f      	beq.n	8002c3a <TIM_Base_SetConfig+0x9a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <TIM_Base_SetConfig+0x124>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <TIM_Base_SetConfig+0x9a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a28      	ldr	r2, [pc, #160]	; (8002cc8 <TIM_Base_SetConfig+0x128>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <TIM_Base_SetConfig+0x9a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <TIM_Base_SetConfig+0x12c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_Base_SetConfig+0x9a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <TIM_Base_SetConfig+0x130>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d108      	bne.n	8002c4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <TIM_Base_SetConfig+0x114>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00f      	beq.n	8002c98 <TIM_Base_SetConfig+0xf8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <TIM_Base_SetConfig+0x124>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <TIM_Base_SetConfig+0xf8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <TIM_Base_SetConfig+0x128>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d007      	beq.n	8002c98 <TIM_Base_SetConfig+0xf8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <TIM_Base_SetConfig+0x12c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_Base_SetConfig+0xf8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <TIM_Base_SetConfig+0x130>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d103      	bne.n	8002ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	615a      	str	r2, [r3, #20]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800
 8002cc0:	40000c00 	.word	0x40000c00
 8002cc4:	40013400 	.word	0x40013400
 8002cc8:	40014000 	.word	0x40014000
 8002ccc:	40014400 	.word	0x40014400
 8002cd0:	40014800 	.word	0x40014800

08002cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e068      	b.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d004      	beq.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2d      	ldr	r2, [pc, #180]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d108      	bne.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1e      	ldr	r2, [pc, #120]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01d      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d018      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1b      	ldr	r2, [pc, #108]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00e      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d004      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10c      	bne.n	8002dac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40013400 	.word	0x40013400
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	40014000 	.word	0x40014000

08002de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e040      	b.n	8002eb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fd fce2 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fbc2 	bl	80035e8 <UART_SetConfig>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e022      	b.n	8002eb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fe6e 	bl	8003b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fef5 	bl	8003c9c <UART_CheckIdleState>
 8002eb2:	4603      	mov	r3, r0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	f040 8082 	bne.w	8002fda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_UART_Transmit+0x26>
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07a      	b.n	8002fdc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_UART_Transmit+0x38>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e073      	b.n	8002fdc <HAL_UART_Transmit+0x120>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2221      	movs	r2, #33	; 0x21
 8002f08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0a:	f7fd fdcd 	bl	8000aa8 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	88fa      	ldrh	r2, [r7, #6]
 8002f1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f28:	d108      	bne.n	8002f3c <HAL_UART_Transmit+0x80>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e003      	b.n	8002f44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f4c:	e02d      	b.n	8002faa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2200      	movs	r2, #0
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fee8 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e039      	b.n	8002fdc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10b      	bne.n	8002f86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3302      	adds	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e008      	b.n	8002f98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3301      	adds	r3, #1
 8002f96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1cb      	bne.n	8002f4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2140      	movs	r1, #64	; 0x40
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 feb4 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e005      	b.n	8002fdc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e000      	b.n	8002fdc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
  }
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b0ba      	sub	sp, #232	; 0xe8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800300a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800300e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003012:	4013      	ands	r3, r2
 8003014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d115      	bne.n	800304c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00f      	beq.n	800304c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800302c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d009      	beq.n	800304c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 82a6 	beq.w	800358e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	4798      	blx	r3
      }
      return;
 800304a:	e2a0      	b.n	800358e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800304c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8117 	beq.w	8003284 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003062:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003066:	4b85      	ldr	r3, [pc, #532]	; (800327c <HAL_UART_IRQHandler+0x298>)
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 810a 	beq.w	8003284 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d011      	beq.n	80030a0 <HAL_UART_IRQHandler+0xbc>
 800307c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2201      	movs	r2, #1
 800308e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d011      	beq.n	80030d0 <HAL_UART_IRQHandler+0xec>
 80030ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2202      	movs	r2, #2
 80030be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c6:	f043 0204 	orr.w	r2, r3, #4
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d011      	beq.n	8003100 <HAL_UART_IRQHandler+0x11c>
 80030dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2204      	movs	r2, #4
 80030ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f6:	f043 0202 	orr.w	r2, r3, #2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d017      	beq.n	800313c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800310c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800311c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00b      	beq.n	800313c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2208      	movs	r2, #8
 800312a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003132:	f043 0208 	orr.w	r2, r3, #8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800313c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003144:	2b00      	cmp	r3, #0
 8003146:	d012      	beq.n	800316e <HAL_UART_IRQHandler+0x18a>
 8003148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00c      	beq.n	800316e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800315c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 820c 	beq.w	8003592 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800317a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00d      	beq.n	80031a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d005      	beq.n	80031c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d04f      	beq.n	8003266 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fe75 	bl	8003eb6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d141      	bne.n	800325e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3308      	adds	r3, #8
 8003202:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003206:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800320a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800321e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1d9      	bne.n	80031da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	2b00      	cmp	r3, #0
 800322c:	d013      	beq.n	8003256 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <HAL_UART_IRQHandler+0x29c>)
 8003234:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fdb3 	bl	8000da6 <HAL_DMA_Abort_IT>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d017      	beq.n	8003276 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e00f      	b.n	8003276 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f9b0 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	e00b      	b.n	8003276 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f9ac 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	e007      	b.n	8003276 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f9a8 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003274:	e18d      	b.n	8003592 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003276:	bf00      	nop
    return;
 8003278:	e18b      	b.n	8003592 <HAL_UART_IRQHandler+0x5ae>
 800327a:	bf00      	nop
 800327c:	04000120 	.word	0x04000120
 8003280:	08003f7d 	.word	0x08003f7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003288:	2b01      	cmp	r3, #1
 800328a:	f040 8146 	bne.w	800351a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 813f 	beq.w	800351a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800329c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8138 	beq.w	800351a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2210      	movs	r2, #16
 80032b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	f040 80b4 	bne.w	800342a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 815f 	beq.w	8003596 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032e2:	429a      	cmp	r2, r3
 80032e4:	f080 8157 	bcs.w	8003596 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 8085 	bne.w	800340e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800331c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800332e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003332:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800333a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1da      	bne.n	8003304 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3308      	adds	r3, #8
 8003354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800335e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3308      	adds	r3, #8
 800336e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800337a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e1      	bne.n	800334e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3308      	adds	r3, #8
 8003390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800339a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3308      	adds	r3, #8
 80033aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e3      	bne.n	800338a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d6:	e853 3f00 	ldrex	r3, [r3]
 80033da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033de:	f023 0310 	bic.w	r3, r3, #16
 80033e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80033f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e4      	bne.n	80033ce <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd fc8e 	bl	8000d2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800341a:	b29b      	uxth	r3, r3
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	b29b      	uxth	r3, r3
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8d4 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003428:	e0b5      	b.n	8003596 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003436:	b29b      	uxth	r3, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80a7 	beq.w	800359a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800344c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a2 	beq.w	800359a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800346a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003478:	647b      	str	r3, [r7, #68]	; 0x44
 800347a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800347e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e4      	bne.n	8003456 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3308      	adds	r3, #8
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	e853 3f00 	ldrex	r3, [r3]
 800349a:	623b      	str	r3, [r7, #32]
   return(result);
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3308      	adds	r3, #8
 80034ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034b0:	633a      	str	r2, [r7, #48]	; 0x30
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e3      	bne.n	800348c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0310 	bic.w	r3, r3, #16
 80034ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	69b9      	ldr	r1, [r7, #24]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	617b      	str	r3, [r7, #20]
   return(result);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e4      	bne.n	80034d6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800350c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f85c 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003518:	e03f      	b.n	800359a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800351a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00e      	beq.n	8003544 <HAL_UART_IRQHandler+0x560>
 8003526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800353a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fd5d 	bl	8003ffc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003542:	e02d      	b.n	80035a0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01c      	beq.n	800359e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
    }
    return;
 800356c:	e017      	b.n	800359e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d012      	beq.n	80035a0 <HAL_UART_IRQHandler+0x5bc>
 800357a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00c      	beq.n	80035a0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fd0e 	bl	8003fa8 <UART_EndTransmit_IT>
    return;
 800358c:	e008      	b.n	80035a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800358e:	bf00      	nop
 8003590:	e006      	b.n	80035a0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003592:	bf00      	nop
 8003594:	e004      	b.n	80035a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003596:	bf00      	nop
 8003598:	e002      	b.n	80035a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <HAL_UART_IRQHandler+0x5bc>
    return;
 800359e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035a0:	37e8      	adds	r7, #232	; 0xe8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop

080035a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ec:	b08a      	sub	sp, #40	; 0x28
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	431a      	orrs	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	431a      	orrs	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4313      	orrs	r3, r2
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4ba4      	ldr	r3, [pc, #656]	; (80038a8 <UART_SetConfig+0x2c0>)
 8003618:	4013      	ands	r3, r2
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003620:	430b      	orrs	r3, r1
 8003622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a99      	ldr	r2, [pc, #612]	; (80038ac <UART_SetConfig+0x2c4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	4313      	orrs	r3, r2
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a90      	ldr	r2, [pc, #576]	; (80038b0 <UART_SetConfig+0x2c8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d126      	bne.n	80036c0 <UART_SetConfig+0xd8>
 8003672:	4b90      	ldr	r3, [pc, #576]	; (80038b4 <UART_SetConfig+0x2cc>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b03      	cmp	r3, #3
 800367e:	d81b      	bhi.n	80036b8 <UART_SetConfig+0xd0>
 8003680:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UART_SetConfig+0xa0>)
 8003682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003686:	bf00      	nop
 8003688:	08003699 	.word	0x08003699
 800368c:	080036a9 	.word	0x080036a9
 8003690:	080036a1 	.word	0x080036a1
 8003694:	080036b1 	.word	0x080036b1
 8003698:	2301      	movs	r3, #1
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369e:	e116      	b.n	80038ce <UART_SetConfig+0x2e6>
 80036a0:	2302      	movs	r3, #2
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a6:	e112      	b.n	80038ce <UART_SetConfig+0x2e6>
 80036a8:	2304      	movs	r3, #4
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ae:	e10e      	b.n	80038ce <UART_SetConfig+0x2e6>
 80036b0:	2308      	movs	r3, #8
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b6:	e10a      	b.n	80038ce <UART_SetConfig+0x2e6>
 80036b8:	2310      	movs	r3, #16
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036be:	e106      	b.n	80038ce <UART_SetConfig+0x2e6>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a7c      	ldr	r2, [pc, #496]	; (80038b8 <UART_SetConfig+0x2d0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d138      	bne.n	800373c <UART_SetConfig+0x154>
 80036ca:	4b7a      	ldr	r3, [pc, #488]	; (80038b4 <UART_SetConfig+0x2cc>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b0c      	cmp	r3, #12
 80036d6:	d82d      	bhi.n	8003734 <UART_SetConfig+0x14c>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0xf8>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	08003715 	.word	0x08003715
 80036e4:	08003735 	.word	0x08003735
 80036e8:	08003735 	.word	0x08003735
 80036ec:	08003735 	.word	0x08003735
 80036f0:	08003725 	.word	0x08003725
 80036f4:	08003735 	.word	0x08003735
 80036f8:	08003735 	.word	0x08003735
 80036fc:	08003735 	.word	0x08003735
 8003700:	0800371d 	.word	0x0800371d
 8003704:	08003735 	.word	0x08003735
 8003708:	08003735 	.word	0x08003735
 800370c:	08003735 	.word	0x08003735
 8003710:	0800372d 	.word	0x0800372d
 8003714:	2300      	movs	r3, #0
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e0d8      	b.n	80038ce <UART_SetConfig+0x2e6>
 800371c:	2302      	movs	r3, #2
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e0d4      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003724:	2304      	movs	r3, #4
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372a:	e0d0      	b.n	80038ce <UART_SetConfig+0x2e6>
 800372c:	2308      	movs	r3, #8
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003732:	e0cc      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003734:	2310      	movs	r3, #16
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e0c8      	b.n	80038ce <UART_SetConfig+0x2e6>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a5e      	ldr	r2, [pc, #376]	; (80038bc <UART_SetConfig+0x2d4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d125      	bne.n	8003792 <UART_SetConfig+0x1aa>
 8003746:	4b5b      	ldr	r3, [pc, #364]	; (80038b4 <UART_SetConfig+0x2cc>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003750:	2b30      	cmp	r3, #48	; 0x30
 8003752:	d016      	beq.n	8003782 <UART_SetConfig+0x19a>
 8003754:	2b30      	cmp	r3, #48	; 0x30
 8003756:	d818      	bhi.n	800378a <UART_SetConfig+0x1a2>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d00a      	beq.n	8003772 <UART_SetConfig+0x18a>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d814      	bhi.n	800378a <UART_SetConfig+0x1a2>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <UART_SetConfig+0x182>
 8003764:	2b10      	cmp	r3, #16
 8003766:	d008      	beq.n	800377a <UART_SetConfig+0x192>
 8003768:	e00f      	b.n	800378a <UART_SetConfig+0x1a2>
 800376a:	2300      	movs	r3, #0
 800376c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003770:	e0ad      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003772:	2302      	movs	r3, #2
 8003774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003778:	e0a9      	b.n	80038ce <UART_SetConfig+0x2e6>
 800377a:	2304      	movs	r3, #4
 800377c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003780:	e0a5      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003782:	2308      	movs	r3, #8
 8003784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003788:	e0a1      	b.n	80038ce <UART_SetConfig+0x2e6>
 800378a:	2310      	movs	r3, #16
 800378c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003790:	e09d      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a4a      	ldr	r2, [pc, #296]	; (80038c0 <UART_SetConfig+0x2d8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d125      	bne.n	80037e8 <UART_SetConfig+0x200>
 800379c:	4b45      	ldr	r3, [pc, #276]	; (80038b4 <UART_SetConfig+0x2cc>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037a6:	2bc0      	cmp	r3, #192	; 0xc0
 80037a8:	d016      	beq.n	80037d8 <UART_SetConfig+0x1f0>
 80037aa:	2bc0      	cmp	r3, #192	; 0xc0
 80037ac:	d818      	bhi.n	80037e0 <UART_SetConfig+0x1f8>
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d00a      	beq.n	80037c8 <UART_SetConfig+0x1e0>
 80037b2:	2b80      	cmp	r3, #128	; 0x80
 80037b4:	d814      	bhi.n	80037e0 <UART_SetConfig+0x1f8>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <UART_SetConfig+0x1d8>
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d008      	beq.n	80037d0 <UART_SetConfig+0x1e8>
 80037be:	e00f      	b.n	80037e0 <UART_SetConfig+0x1f8>
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e082      	b.n	80038ce <UART_SetConfig+0x2e6>
 80037c8:	2302      	movs	r3, #2
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ce:	e07e      	b.n	80038ce <UART_SetConfig+0x2e6>
 80037d0:	2304      	movs	r3, #4
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d6:	e07a      	b.n	80038ce <UART_SetConfig+0x2e6>
 80037d8:	2308      	movs	r3, #8
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037de:	e076      	b.n	80038ce <UART_SetConfig+0x2e6>
 80037e0:	2310      	movs	r3, #16
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e6:	e072      	b.n	80038ce <UART_SetConfig+0x2e6>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a35      	ldr	r2, [pc, #212]	; (80038c4 <UART_SetConfig+0x2dc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d12a      	bne.n	8003848 <UART_SetConfig+0x260>
 80037f2:	4b30      	ldr	r3, [pc, #192]	; (80038b4 <UART_SetConfig+0x2cc>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003800:	d01a      	beq.n	8003838 <UART_SetConfig+0x250>
 8003802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003806:	d81b      	bhi.n	8003840 <UART_SetConfig+0x258>
 8003808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380c:	d00c      	beq.n	8003828 <UART_SetConfig+0x240>
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d815      	bhi.n	8003840 <UART_SetConfig+0x258>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <UART_SetConfig+0x238>
 8003818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381c:	d008      	beq.n	8003830 <UART_SetConfig+0x248>
 800381e:	e00f      	b.n	8003840 <UART_SetConfig+0x258>
 8003820:	2300      	movs	r3, #0
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003826:	e052      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003828:	2302      	movs	r3, #2
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382e:	e04e      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003830:	2304      	movs	r3, #4
 8003832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003836:	e04a      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003838:	2308      	movs	r3, #8
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383e:	e046      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003840:	2310      	movs	r3, #16
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003846:	e042      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a17      	ldr	r2, [pc, #92]	; (80038ac <UART_SetConfig+0x2c4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d13a      	bne.n	80038c8 <UART_SetConfig+0x2e0>
 8003852:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <UART_SetConfig+0x2cc>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800385c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003860:	d01a      	beq.n	8003898 <UART_SetConfig+0x2b0>
 8003862:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003866:	d81b      	bhi.n	80038a0 <UART_SetConfig+0x2b8>
 8003868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386c:	d00c      	beq.n	8003888 <UART_SetConfig+0x2a0>
 800386e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003872:	d815      	bhi.n	80038a0 <UART_SetConfig+0x2b8>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <UART_SetConfig+0x298>
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387c:	d008      	beq.n	8003890 <UART_SetConfig+0x2a8>
 800387e:	e00f      	b.n	80038a0 <UART_SetConfig+0x2b8>
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003886:	e022      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003888:	2302      	movs	r3, #2
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388e:	e01e      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003890:	2304      	movs	r3, #4
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003896:	e01a      	b.n	80038ce <UART_SetConfig+0x2e6>
 8003898:	2308      	movs	r3, #8
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389e:	e016      	b.n	80038ce <UART_SetConfig+0x2e6>
 80038a0:	2310      	movs	r3, #16
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a6:	e012      	b.n	80038ce <UART_SetConfig+0x2e6>
 80038a8:	efff69f3 	.word	0xefff69f3
 80038ac:	40008000 	.word	0x40008000
 80038b0:	40013800 	.word	0x40013800
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40004400 	.word	0x40004400
 80038bc:	40004800 	.word	0x40004800
 80038c0:	40004c00 	.word	0x40004c00
 80038c4:	40005000 	.word	0x40005000
 80038c8:	2310      	movs	r3, #16
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a9f      	ldr	r2, [pc, #636]	; (8003b50 <UART_SetConfig+0x568>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d17a      	bne.n	80039ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d824      	bhi.n	800392a <UART_SetConfig+0x342>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <UART_SetConfig+0x300>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800390d 	.word	0x0800390d
 80038ec:	0800392b 	.word	0x0800392b
 80038f0:	08003915 	.word	0x08003915
 80038f4:	0800392b 	.word	0x0800392b
 80038f8:	0800391b 	.word	0x0800391b
 80038fc:	0800392b 	.word	0x0800392b
 8003900:	0800392b 	.word	0x0800392b
 8003904:	0800392b 	.word	0x0800392b
 8003908:	08003923 	.word	0x08003923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800390c:	f7fe fa58 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 8003910:	61f8      	str	r0, [r7, #28]
        break;
 8003912:	e010      	b.n	8003936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003914:	4b8f      	ldr	r3, [pc, #572]	; (8003b54 <UART_SetConfig+0x56c>)
 8003916:	61fb      	str	r3, [r7, #28]
        break;
 8003918:	e00d      	b.n	8003936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800391a:	f7fe f9b9 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 800391e:	61f8      	str	r0, [r7, #28]
        break;
 8003920:	e009      	b.n	8003936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003926:	61fb      	str	r3, [r7, #28]
        break;
 8003928:	e005      	b.n	8003936 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003934:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80fb 	beq.w	8003b34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	429a      	cmp	r2, r3
 800394c:	d305      	bcc.n	800395a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	429a      	cmp	r2, r3
 8003958:	d903      	bls.n	8003962 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003960:	e0e8      	b.n	8003b34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2200      	movs	r2, #0
 8003966:	461c      	mov	r4, r3
 8003968:	4615      	mov	r5, r2
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	022b      	lsls	r3, r5, #8
 8003974:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003978:	0222      	lsls	r2, r4, #8
 800397a:	68f9      	ldr	r1, [r7, #12]
 800397c:	6849      	ldr	r1, [r1, #4]
 800397e:	0849      	lsrs	r1, r1, #1
 8003980:	2000      	movs	r0, #0
 8003982:	4688      	mov	r8, r1
 8003984:	4681      	mov	r9, r0
 8003986:	eb12 0a08 	adds.w	sl, r2, r8
 800398a:	eb43 0b09 	adc.w	fp, r3, r9
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800399c:	4650      	mov	r0, sl
 800399e:	4659      	mov	r1, fp
 80039a0:	f7fc fc12 	bl	80001c8 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b2:	d308      	bcc.n	80039c6 <UART_SetConfig+0x3de>
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ba:	d204      	bcs.n	80039c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	60da      	str	r2, [r3, #12]
 80039c4:	e0b6      	b.n	8003b34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039cc:	e0b2      	b.n	8003b34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d6:	d15e      	bne.n	8003a96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d828      	bhi.n	8003a32 <UART_SetConfig+0x44a>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0x400>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a15 	.word	0x08003a15
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a33 	.word	0x08003a33
 80039f8:	08003a23 	.word	0x08003a23
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a33 	.word	0x08003a33
 8003a04:	08003a33 	.word	0x08003a33
 8003a08:	08003a2b 	.word	0x08003a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7fe f9d8 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 8003a10:	61f8      	str	r0, [r7, #28]
        break;
 8003a12:	e014      	b.n	8003a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a14:	f7fe f9ea 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8003a18:	61f8      	str	r0, [r7, #28]
        break;
 8003a1a:	e010      	b.n	8003a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1c:	4b4d      	ldr	r3, [pc, #308]	; (8003b54 <UART_SetConfig+0x56c>)
 8003a1e:	61fb      	str	r3, [r7, #28]
        break;
 8003a20:	e00d      	b.n	8003a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7fe f935 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8003a26:	61f8      	str	r0, [r7, #28]
        break;
 8003a28:	e009      	b.n	8003a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2e:	61fb      	str	r3, [r7, #28]
        break;
 8003a30:	e005      	b.n	8003a3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d077      	beq.n	8003b34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	005a      	lsls	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	441a      	add	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b0f      	cmp	r3, #15
 8003a5e:	d916      	bls.n	8003a8e <UART_SetConfig+0x4a6>
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a66:	d212      	bcs.n	8003a8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f023 030f 	bic.w	r3, r3, #15
 8003a70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	8afb      	ldrh	r3, [r7, #22]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	8afa      	ldrh	r2, [r7, #22]
 8003a8a:	60da      	str	r2, [r3, #12]
 8003a8c:	e052      	b.n	8003b34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a94:	e04e      	b.n	8003b34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d827      	bhi.n	8003aee <UART_SetConfig+0x506>
 8003a9e:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <UART_SetConfig+0x4bc>)
 8003aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa4:	08003ac9 	.word	0x08003ac9
 8003aa8:	08003ad1 	.word	0x08003ad1
 8003aac:	08003ad9 	.word	0x08003ad9
 8003ab0:	08003aef 	.word	0x08003aef
 8003ab4:	08003adf 	.word	0x08003adf
 8003ab8:	08003aef 	.word	0x08003aef
 8003abc:	08003aef 	.word	0x08003aef
 8003ac0:	08003aef 	.word	0x08003aef
 8003ac4:	08003ae7 	.word	0x08003ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f7fe f97a 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 8003acc:	61f8      	str	r0, [r7, #28]
        break;
 8003ace:	e014      	b.n	8003afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ad0:	f7fe f98c 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8003ad4:	61f8      	str	r0, [r7, #28]
        break;
 8003ad6:	e010      	b.n	8003afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <UART_SetConfig+0x56c>)
 8003ada:	61fb      	str	r3, [r7, #28]
        break;
 8003adc:	e00d      	b.n	8003afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ade:	f7fe f8d7 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8003ae2:	61f8      	str	r0, [r7, #28]
        break;
 8003ae4:	e009      	b.n	8003afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aea:	61fb      	str	r3, [r7, #28]
        break;
 8003aec:	e005      	b.n	8003afa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003af8:	bf00      	nop
    }

    if (pclk != 0U)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d019      	beq.n	8003b34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	085a      	lsrs	r2, r3, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	441a      	add	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b0f      	cmp	r3, #15
 8003b18:	d909      	bls.n	8003b2e <UART_SetConfig+0x546>
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d205      	bcs.n	8003b2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60da      	str	r2, [r3, #12]
 8003b2c:	e002      	b.n	8003b34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3728      	adds	r7, #40	; 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4e:	bf00      	nop
 8003b50:	40008000 	.word	0x40008000
 8003b54:	00f42400 	.word	0x00f42400

08003b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01a      	beq.n	8003c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c56:	d10a      	bne.n	8003c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]
  }
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cac:	f7fc fefc 	bl	8000aa8 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d10e      	bne.n	8003cde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f82d 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e023      	b.n	8003d26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d10e      	bne.n	8003d0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f817 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e00d      	b.n	8003d26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b09c      	sub	sp, #112	; 0x70
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3e:	e0a5      	b.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d46:	f000 80a1 	beq.w	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fc fead 	bl	8000aa8 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d13e      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d74:	667b      	str	r3, [r7, #100]	; 0x64
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e6      	bne.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	663b      	str	r3, [r7, #96]	; 0x60
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3308      	adds	r3, #8
 8003db0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003db2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003db4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e067      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d04f      	beq.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfa:	d147      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
 8003e26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	613b      	str	r3, [r7, #16]
   return(result);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e58:	623a      	str	r2, [r7, #32]
 8003e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	69f9      	ldr	r1, [r7, #28]
 8003e5e:	6a3a      	ldr	r2, [r7, #32]
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e5      	bne.n	8003e38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e010      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	f43f af4a 	beq.w	8003d40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3770      	adds	r7, #112	; 0x70
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b095      	sub	sp, #84	; 0x54
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003edc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ede:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e6      	bne.n	8003ebe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d118      	bne.n	8003f5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f023 0310 	bic.w	r3, r3, #16
 8003f40:	647b      	str	r3, [r7, #68]	; 0x44
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	613b      	str	r3, [r7, #16]
   return(result);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e6      	bne.n	8003f2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f70:	bf00      	nop
 8003f72:	3754      	adds	r7, #84	; 0x54
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff fb0e 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6979      	ldr	r1, [r7, #20]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	613b      	str	r3, [r7, #16]
   return(result);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e6      	bne.n	8003fb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fada 	bl	80035a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ff4:	bf00      	nop
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4d0d      	ldr	r5, [pc, #52]	; (8004048 <__libc_init_array+0x38>)
 8004014:	4c0d      	ldr	r4, [pc, #52]	; (800404c <__libc_init_array+0x3c>)
 8004016:	1b64      	subs	r4, r4, r5
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	2600      	movs	r6, #0
 800401c:	42a6      	cmp	r6, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4d0b      	ldr	r5, [pc, #44]	; (8004050 <__libc_init_array+0x40>)
 8004022:	4c0c      	ldr	r4, [pc, #48]	; (8004054 <__libc_init_array+0x44>)
 8004024:	f000 f820 	bl	8004068 <_init>
 8004028:	1b64      	subs	r4, r4, r5
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	2600      	movs	r6, #0
 800402e:	42a6      	cmp	r6, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f855 3b04 	ldr.w	r3, [r5], #4
 8004038:	4798      	blx	r3
 800403a:	3601      	adds	r6, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004042:	4798      	blx	r3
 8004044:	3601      	adds	r6, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	080040d0 	.word	0x080040d0
 800404c:	080040d0 	.word	0x080040d0
 8004050:	080040d0 	.word	0x080040d0
 8004054:	080040d4 	.word	0x080040d4

08004058 <memset>:
 8004058:	4402      	add	r2, r0
 800405a:	4603      	mov	r3, r0
 800405c:	4293      	cmp	r3, r2
 800405e:	d100      	bne.n	8004062 <memset+0xa>
 8004060:	4770      	bx	lr
 8004062:	f803 1b01 	strb.w	r1, [r3], #1
 8004066:	e7f9      	b.n	800405c <memset+0x4>

08004068 <_init>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	bf00      	nop
 800406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406e:	bc08      	pop	{r3}
 8004070:	469e      	mov	lr, r3
 8004072:	4770      	bx	lr

08004074 <_fini>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	bf00      	nop
 8004078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407a:	bc08      	pop	{r3}
 800407c:	469e      	mov	lr, r3
 800407e:	4770      	bx	lr
